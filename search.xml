<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript 中的 this 指向</title>
    <url>/2019/06/12/90612.html</url>
    <content><![CDATA[<h1 id="JavaScript-中的-this-指向"><a href="#JavaScript-中的-this-指向" class="headerlink" title="JavaScript 中的 this 指向"></a>JavaScript 中的 this 指向</h1><h2 id="全局的-this"><a href="#全局的-this" class="headerlink" title="全局的 this"></a>全局的 this</h2><p>全局 this 一般指向全局对象，浏览器中的全局对象就是 <code>window</code>。</p>
<p>例如：</p>
<pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>document <span class="token operator">===</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">91</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//91</span></code></pre>

<h2 id="一般函数的-this"><a href="#一般函数的-this" class="headerlink" title="一般函数的 this"></a>一般函数的 this</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true, global object</span></code></pre>

<p>可以看到一般函数的 this 也指向 window，在 nodeJS 中为 global object</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment">//使用严格模式</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span></code></pre>

<p>严格模式中，函数的 this 为 undefined</p>
<h2 id="作为对象方法的函数的-this"><a href="#作为对象方法的函数的-this" class="headerlink" title="作为对象方法的函数的 this"></a>作为对象方法的函数的 this</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>
    <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37</span></code></pre>

<p>上述代码通过字面量创建对象 o。</p>
<p>f 为对象 o 的方法。这个方法的 this 指向这个对象，在这里即对象 o。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token number">37</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">independent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prop<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
o<span class="token punctuation">.</span>f <span class="token operator">=</span> independent<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37</span></code></pre>

<p>上面的代码，创建了对象 o，但是没有给对象 o，添加方法。而是通过 <code>o.f = independent</code> 临时添加了方法属性。这样这个方法中的 this 同样也指向这个对象 o。</p>
<h2 id="对象原型链上的-this"><a href="#对象原型链上的-this" class="headerlink" title="对象原型链上的 this"></a>对象原型链上的 this</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">f</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
p<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3</span></code></pre>

<p>通过 <code>var p = Object.create(o)</code> 创建的对象，p 是基于原型 o 创建出的对象。</p>
<p>p 的原型是 o，调用 f() 的时候是调用了 o 上的方法 f()，这里面的 this 是可以指向当前对象的，即对象 p。</p>
<h2 id="get-set-方法与-this"><a href="#get-set-方法与-this" class="headerlink" title="get/set 方法与 this"></a>get/set 方法与 this</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">modulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>re <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>re <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>im <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>im<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">re</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">im</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">phase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">atan2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>im<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>re<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'modulus'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">get</span><span class="token operator">:</span> modulus<span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>phase<span class="token punctuation">,</span> o<span class="token punctuation">.</span>modulus<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -0.78 1.4142</span></code></pre>

<p>get/set 方法中的 this 也会指向 get/set 方法所在的对象的。</p>
<h2 id="构造器中的-this"><a href="#构造器中的-this" class="headerlink" title="构造器中的 this"></a>构造器中的 this</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//25</span></code></pre>

<p>new MyClass() 的时候，MyClass()中的 this 会指向一个空对象，这个对象的原型会指向 MyClass.prototype。MyClass()没有返回值或者返回为基本类型时，默认将 this 返回。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">24</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//24</span></code></pre>

<p>因为返回了对象，将这个对象作为返回值</p>
<h2 id="call-apply-方法与-this"><a href="#call-apply-方法与-this" class="headerlink" title="call/apply 方法与 this"></a>call/apply 方法与 this</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> c <span class="token operator">+</span> d<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">add</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 + 3 + 5 + 7 = 16</span>
<span class="token function">add</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 + 3 + 10 + 20 = 34</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">bar</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "[object Number]"</span></code></pre>

<h2 id="bind-方法与-this"><a href="#bind-方法与-this" class="headerlink" title="bind 方法与 this"></a>bind 方法与 this</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">"test"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">37</span><span class="token punctuation">,</span>
    <span class="token literal-property property">f</span><span class="token operator">:</span> f<span class="token punctuation">,</span>
    <span class="token literal-property property">g</span><span class="token operator">:</span> g
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 37, test</span></code></pre>

<p>绑定之后再调用时，仍然会按绑定时的内容走，所以 o.g() 结果是 test</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 中的闭包</title>
    <url>/2019/05/17/90517.html</url>
    <content><![CDATA[<h1 id="JavaScript-中的闭包"><a href="#JavaScript-中的闭包" class="headerlink" title="JavaScript 中的闭包"></a>JavaScript 中的闭包</h1><h2 id="闭包的例子"><a href="#闭包的例子" class="headerlink" title="闭包的例子"></a>闭包的例子</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> localVal <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> localVal<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//30</span>

<span class="token keyword">function</span> <span class="token function">outer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> localVal <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> localVal<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">outer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//30</span></code></pre>

<p>对于第一个普通的函数，在执行过之后，它的局部变量就可以被释放。</p>
<p>对于第二个函数，<code>localVal</code> 是不能被释放的。因为调用 <code>outer2()</code> 后，返回的是匿名函数，匿名函数可以访问外部的 <code>outer2()</code> 中的局部变量，并返回了这个局部变量 localVal。当 <code>outer2()</code> 赋值给 <code>func</code> 后，再次调用 <code>func()</code>，仍能访问到局部变量 <code>localVal</code>。这种情况就是闭包。</p>
<hr>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><strong>所谓闭包就是：子函数可以使用父函数中的局部变量。</strong></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">!</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> localData <span class="token operator">=</span> <span class="token string">"localData here"</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里访问外部数据</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">!</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> localData <span class="token operator">=</span> <span class="token string">"localData here"</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"http://www.baidu.com/"</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
        <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// do sth...</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里访问外部数据</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<hr>
<h2 id="常见错误之循环闭包"><a href="#常见错误之循环闭包" class="headerlink" title="常见错误之循环闭包"></a>常见错误之循环闭包</h2><p>比如我们想循环绑定点击事件</p>
<pre class="language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;div id=div1>aaa&lt;/div>&lt;div id=div2>bbb&lt;/div>&lt;div id=div3>ccc&lt;/div>"</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span>
    <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// all are 4!</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>上面的代码，我们点击任何一个 div，弹出的都是 4</p>
<p>这是因为，for 循环中的 i 是一个全局变量。这里内函数的点击事件，访问到的是循环后的 i 值，所以是 4</p>
<pre class="language-js" data-language="js"><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;div id=div1>aaa&lt;/div>&lt;div id=div2>bbb&lt;/div>&lt;div id=div3>ccc&lt;/div>"</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">!</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span>
        <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这里使用了立即执行函数，并给匿名函数赋值 i，这样点击事件每一次就会访问到相应的 i。</p>
<hr>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> _userId <span class="token operator">=</span> <span class="token number">9527</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> _typeId <span class="token operator">=</span> <span class="token string">"item"</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> exp <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">converter</span><span class="token punctuation">(</span><span class="token parameter">userId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">+</span>userId<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    exp<span class="token punctuation">.</span><span class="token function-variable function">getUserId</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">converter</span><span class="token punctuation">(</span>_userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    exp<span class="token punctuation">.</span><span class="token function-variable function">getTypeId</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> _typeId<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    window<span class="token punctuation">.</span>a <span class="token operator">=</span> exp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9527</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//item</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>_userId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>_typeId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Uncaught ReferenceError: converter is not defined</span></code></pre>

<p>上面的代码通过闭包实现了一个封装。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<ul>
<li>在计算机科学中，闭包（也称词法闭包或函数闭包）是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量（也叫自由变量）的表。</li>
<li>闭包，不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。</li>
</ul>
<p>from 维基百科</p>
</blockquote>
<ul>
<li>闭包的优点<ul>
<li>灵活和方便</li>
<li>封装</li>
</ul>
</li>
<li>缺点<ul>
<li>空间浪费</li>
<li>内存泄露</li>
<li>性能消耗</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 介绍与入门</title>
    <url>/2020/01/15/77.html</url>
    <content><![CDATA[<h1 id="Markdown介绍与入门"><a href="#Markdown介绍与入门" class="headerlink" title="Markdown介绍与入门"></a>Markdown介绍与入门</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Markdown是一种轻量级的标记语言，使用普通的文本编辑器，通过简单的标记语法，就可以实现漂亮的排版，被越来越多的写作爱好者、程序员所使用。Markdown自成格式，不依赖任何编辑器，且易于传播，其语法十分简单，通过几分钟的简单学习，就可以实现基本的排版，然后专注于码字。</p>
<p>Markdown现在十分流行，经常访问 <code>github</code> 的朋友一定会发现，几乎所有的开源代码里，都有一个<code>README.md </code>文件，这个 <code>md</code> 文件，就是使用Markdown标记语言编写的。</p>
<h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><p><strong>1.标题</strong><br>　　标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。Markdown总共支持六级标题，一级标题1个#，二级标题2个#，依此类推。<br>如下图，左边是编辑区界面，右边是预览界面，仅需在文字前加上几个#号（注意：markdown语法，一般要在标记符号后加一个空格）。</p>
<p><strong>2.列表</strong><br>列表分为有序列表和无序列表。列表可通过缩进实现嵌套的列表。</p>
<p>有序列表：在文字前加上 1. 2. 3.即可变为有序列表。<br>无序列表：在文字前加上一个- 或者*或者+。<br>如下图：</p>
<p><strong>注意：</strong></p>
<p>无序列表或有序列表标记和后面的文字之间要有一个空格隔开。<br>有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的。<br>无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的。<br>3.引用<br>如果你需要引用一小处别处的句子，就需要用上引用的格式。引用的标记符号是&gt;。<br>如下图：</p>
<p>引用也可以嵌套多级，两个&gt;可以实现二级引用，三个&gt;可以实现三级引用。<br>如下图：</p>
<p>4.插入图片和链接<br>链接与图片的语法很像。</p>
<p>插入图片： <img src="">，在[]中写替代文字（假如因为某些原因图片加载不成功，就显示这些文字，可以为空），（）中写图片地址，可以是本地地址，也可以是网络地址，通常使用网络地址。<br>插入链接：<a href=""></a>，同上。<br>如下图：</p>
<p>5.粗体与斜体<br>使用<code>**或者_表示粗体，*或者</code>表示斜体。<br>如下图：</p>
<p>注意：前后的 * 或 _ 与要 加粗或倾斜 的字体之间不能有空格。</p>
<p>6.分割线<br>使用—或**<em>或</em> * *可以实现分割线。<br>如下图：</p>
<p>7.行内代码和代码块<br>行内代码：将小段文字或代码，放在一个<code>符号对中，就是行内代码的标记规则。 代码块， 使用“</code>表示代码块。<br>如下图：</p>
<p>注意：`这个符号，在键盘上ESC键下面，切换到英文输入法即可打出。</p>
<p>8.表格<br>相比前面几项标记，表格真是太复杂了T_T。</p>
<p>——: 为右对齐。<br>:—— 为左对齐。<br>:——: 为居中对齐。<br>——- 为使用默认居中对齐。<br>如下图：</p>
<p>但是如果你使用一些Markdown编辑器，通常可以用过鼠标操作插入表格，很简单。</p>
<h2 id="次常用语法"><a href="#次常用语法" class="headerlink" title="次常用语法"></a>次常用语法</h2><ol>
<li><p>目录<br>使用 [TOC] 可以自动生成目录，前提是你是按照标准Markdown语法写的。<br>注意：[TOC] 标记可能只能放在一级标题的前面，视不同的编译器而定。</p>
</li>
<li><p>反斜杠<br>使用 \ 表示反斜杠。在你不想显示Markdown标记时可以使用反斜杠。<br>如：当你输入<em>电子科技大学</em>的时候，默认会以斜体的形式呈现，你若本就想显示出<em>，就在</em>前面加上反斜杠\吧。</p>
</li>
<li><p>空格<br>Markdown语法会忽略首行开头的空格，如果要体现出首行开头空两个的效果，可以使用 全角符号下的空格 ，windows下使用 shift+空格 切换。</p>
</li>
</ol>
<p>4.删除线<br>使用~~表示删除线</p>
<p>这是一条删除线</p>
<p>这是一条删除线</p>
<p>注：有的编译器可能不支持（比如我正在使用的Markdown Pad2）。</p>
<p>5.其他不常用的语法<br>小编用到的语法也很少，平时使用的就几个常用标记。其他语法如标签分类(Tags)、注脚、页内跳转等等，很少用到，各位同学需要的时候再自己百度吧。</p>
<h2 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h2><p><strong>1.Latex公式</strong><br>Markdown语法支持插入大名鼎鼎的Latex，这简直就是神器啊。在Markdown中插入Latex公式需要编译器支持，用法也有很多，这里就不能介绍了，用到的朋友自行百度吧。</p>
<p><strong>2.流程图</strong><br>Markdown还支持插入流程图，用法较为复杂。这里也不能做详细介绍了。</p>
<h2 id="编辑器推荐"><a href="#编辑器推荐" class="headerlink" title="编辑器推荐"></a>编辑器推荐</h2><p><strong>在线Markdown编辑器</strong><br>    <strong>dillinger ：</strong>漂亮强大，支持 <code>md</code>, <code>html</code>, <code>pdf</code> 文件导出。支持 <code>dropbox</code>, <code>onedrive</code>，<code>google drive</code>, <code>github</code>. 来自国外，可能不够稳定。</p>
<p><code>MaHua ：</code>小众软件推荐，界面有些简陋。</p>
<p><strong>简书 ：</strong>一个很不错的博客平台，每几秒钟便会自动存入一个备份。可以直接从本地拖入照片生成链接，一直在不断优化。作为一个博客平台，需要注册账号后方能进行写作。<br>还有很多….</p>
<p><strong>桌面Markdown编辑器</strong><br><code>Typora</code> ：美观、强大。推荐使用。支持Win、Linux、MAC。<br><code>MarkdownPad</code>：功能强大、界面丑陋。Windows平台，使用人数较多。<br><code>HarooPad</code>: 简洁、跨平台。</p>
<p>Markdown简单、强大，强烈推荐！</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 使用 formData 方式向后台发送数据</title>
    <url>/2019/04/13/90413.html</url>
    <content><![CDATA[<h1 id="Vue-使用-formData-方式向后台发送数据"><a href="#Vue-使用-formData-方式向后台发送数据" class="headerlink" title="Vue 使用 formData 方式向后台发送数据"></a>Vue 使用 formData 方式向后台发送数据</h1><h3 id="1-基本使用方式"><a href="#1-基本使用方式" class="headerlink" title="1. 基本使用方式"></a>1. 基本使用方式</h3><p><strong>template</strong></p>
<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image/png,image/gif,image/jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre>

<p><strong>JavaScript</strong></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token function">update</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> file <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment">// console.log(file)</span>
    <span class="token keyword">let</span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建form对象</span>
    param<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 通过append向form对象添加数据</span>
    param<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>userId<span class="token punctuation">)</span> <span class="token comment">// 添加form表单中其他数据</span>
      <span class="token comment">// withCredentials: true 使得后台可以接收表单数据  跨域请求</span>
    <span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// url为后台接口</span>
    instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>succ<span class="token punctuation">)</span> <span class="token comment">// 成功返回信息 调用函数  函数需自己定义，此处后面省略</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serverError<span class="token punctuation">)</span> <span class="token comment">// 服务器错误 调用对应函数  函数需自己定义，此处后面省略</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="2-美化-input-file-按钮-（拓展）"><a href="#2-美化-input-file-按钮-（拓展）" class="headerlink" title="2. 美化 input file 按钮 （拓展）"></a>2. 美化 input file 按钮 （拓展）</h3><blockquote>
<p>思路：</p>
</blockquote>
<ol>
<li>简单粗暴地隐藏：opacity: 0;</li>
<li>在 <code>&lt;input class=&quot;file&quot;&gt; </code>元素节点的位置上创建一个好看的元素节点,比如<code>img</code></li>
<li>将 <code>&lt;input class=&quot;file&quot;&gt; </code>元素的z轴变高，使得其覆盖<code>&lt;img/&gt;</code> :z-index: 5;</li>
<li>因为 <code>&lt;input class=&quot;file&quot;&gt; </code>是透明的，那么我们就只看见它同xy上的好看的<code>&lt;img /&gt;</code></li>
<li>点击这个好看的<code>&lt;img /&gt;</code> 其实是点击了它上层的表单</li>
</ol>
<p>以上思路可以实现点击用户头像，<strong>通过表单上传更换头像</strong></p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>formdata</tag>
        <tag>axios</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 克隆非 master 分支的代码</title>
    <url>/2020/02/14/140.html</url>
    <content><![CDATA[<h1 id="Git-克隆非-master-分支的代码"><a href="#Git-克隆非-master-分支的代码" class="headerlink" title="Git 克隆非 master 分支的代码"></a>Git 克隆非 master 分支的代码</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们每次使用命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@gitlab.xxx.com:xxxxx.git</code></pre>

<p>默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在<code>daily/1.4.1</code>分支上，我们希望拿到这个分支上的代码。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>直接使用命令</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -r <span class="token comment">#查看远程分支</span></code></pre>

<p>或</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch -a <span class="token comment">#查看所有分支</span></code></pre>

<p>会显示</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">origin/HEAD -<span class="token operator">></span> origin/master
origin/daily/1.2.2
origin/daily/1.3.0
origin/daily/1.4.1
origin/develop
origin/feature/daily-1.0.0
origin/master</code></pre>

<p>然后直接</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout origin/daily/1.4.1</code></pre>

<p>就好了。。。</p>
<h2 id="原来的解决方案"><a href="#原来的解决方案" class="headerlink" title="原来的解决方案"></a>原来的解决方案</h2><p><strong>其实我原来写的这个方法更多的是：设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支。</strong></p>
<p>我们在本地先建立一个分支，建议名称和远程的想要同步的分支名称一样。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch daily/1.4.1</code></pre>

<p>在切换到这个本地分支</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout daily/1.4.1
<span class="token comment"># Switched to branch 'daily/1.4.1'</span></code></pre>

<p>接下来就可以去建立上游分支的关联了，但是这个命令比较长，不好记，我们可以直接先<code>pull</code>一下，git 会提示我们相应的操作和命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull
There is no tracking information <span class="token keyword">for</span> the current branch.
Please specify <span class="token function">which</span> branch you want to merge with.
See git-pull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> details.

    <span class="token function">git</span> pull <span class="token operator">&lt;</span>remote<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span>

If you wish to <span class="token builtin class-name">set</span> tracking information <span class="token keyword">for</span> this branch you can <span class="token keyword">do</span> so with:

    <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span> daily/1.4.1</code></pre>

<p>我们看到最后一行，执行这个命令，即可完成与上游分支的关联。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/daily/1.4.1 daily/1.4.1
<span class="token comment"># Branch daily/1.4.1 set up to track remote branch daily/1.4.1 from origin.</span></code></pre>

<p>然后再<code>pull</code>一下就好了！</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull</code></pre>]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub分支</tag>
      </tags>
  </entry>
  <entry>
    <title>了解XSS和CSRF攻击</title>
    <url>/2021/08/26/31410.html</url>
    <content><![CDATA[<h1 id="了解XSS和CSRF攻击"><a href="#了解XSS和CSRF攻击" class="headerlink" title="了解XSS和CSRF攻击"></a>了解XSS和CSRF攻击</h1><h2 id="XSS-和-CSRF-介绍"><a href="#XSS-和-CSRF-介绍" class="headerlink" title="XSS 和 CSRF 介绍"></a>XSS 和 CSRF 介绍</h2><p>在 Web 安全领域中，XSS 和 CSRF 是最常见的攻击方式。那么本文就带你认识一下 XSS 和 CSRF 的攻防问题。</p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h4><p>XSS , 全称：<code>Cross Site Scripting</code> ，译为<strong>跨域脚本攻击</strong>。</p>
<h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>不需要你做任何的登录验证，它会通过合法的操作 (比如在<code>url</code>中输入、在评论框中输入)，向用户的页面注入脚本 (可能是 <code>js</code>、<code>html</code>代码块等)。</p>
<h4 id="防范："><a href="#防范：" class="headerlink" title="防范："></a>防范：</h4><p>1.编码：对于用户输入进行编码。</p>
<p>2.过滤：移除用户输入和事件相关的属性。(过滤 <code>script</code>、<code>style</code>、<code>iframe</code>等节点)</p>
<p>3.校正：使用<code>DOM Parse</code>转换，校正不配对的 <code>DOM</code>标签。</p>
<p>4.使用 <code>HttpOnly</code>。</p>
<h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><ul>
<li>反射性 (非持久)：点击链接，执行脚本</li>
<li>存储型 (持久)：恶意输入保存数据库，其他用户访问，执行脚本</li>
<li>基于 <code>DOM</code>：而已修改 <code>DOM</code> 结构，基于客户端</li>
</ul>
<h3 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h3><h4 id="概念：-1"><a href="#概念：-1" class="headerlink" title="概念："></a>概念：</h4><p>CSRF , 全称：<code>Cross-site request forgery</code> ，译为<strong>跨站请求伪造</strong>。</p>
<h4 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h4><ol>
<li><p>登录受信任的网站 A ，并在本地生成  <code>Cookie</code>。(如果用户没有登录网站 A,那么网站 B 在诱导的时候，请求网站 A 的 <code>api</code> 接口时，会提示你登录)。</p>
</li>
<li><p>在不登出 A  的情况下，访问危险网站 B (其实是利用了 网站 A 的漏洞)。</p>
</li>
</ol>
<h4 id="防范：-1"><a href="#防范：-1" class="headerlink" title="防范："></a>防范：</h4><ol>
<li><code>token</code> 验证；</li>
<li>隐藏令牌，把 <code>token</code>隐藏在 <code>http</code> 请求的 <code>head</code> 中。</li>
<li><code>referer</code> 验证，验证页面来源。</li>
</ol>
<h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><ol>
<li>CSRF：需要用户先登录网站 A ，获取 <code>cookie</code>。XSS：不需要登录而是通过注入脚本等方式。</li>
<li>CSRF：是利用网站 A 本身的漏洞，去请求网站 A 的 <code>api</code>。XSS:是向网站 A 注入 <code>JS</code>代码，然后执行 <code>JS</code>里的代码，篡改网站 A 的内容。</li>
</ol>
]]></content>
      <categories>
        <category>网络攻击</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>在低版本 IE 中点击空 block 元素的问题</title>
    <url>/2019/05/13/90513.html</url>
    <content><![CDATA[<h1 id="在低版本-IE-中点击空-block-元素的问题"><a href="#在低版本-IE-中点击空-block-元素的问题" class="headerlink" title="在低版本 IE 中点击空 block 元素的问题"></a>在低版本 IE 中点击空 block 元素的问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>当我们点击一个空的、没有任何内容的 div 或者其他块级元素时。在 IE11 以下，是没有反应的。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>这类问题使用场景还是很普遍的。比如 UI 给了一张大图，要点击图上的某一块位置的时候。可以用一个空的 div 定位到相应的位置，然后对它进行绑定事件。</p>
<hr>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>解决方法很简单，即给这个块级元素填充任意颜色，然后将其透明度设置为0。代码如下：</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token property">filter</span><span class="token punctuation">:</span><span class="token function">alpha</span><span class="token punctuation">(</span>opacity=0<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>IE</tag>
        <tag>兼容性</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 ES6 基础</title>
    <url>/2019/04/16/90416.html</url>
    <content><![CDATA[<h1 id="学习-ES6-基础"><a href="#学习-ES6-基础" class="headerlink" title="学习 ES6 基础"></a>学习 ES6 基础</h1><h2 id="一、块级作用域"><a href="#一、块级作用域" class="headerlink" title="一、块级作用域"></a>一、块级作用域</h2><h3 id="1-var"><a href="#1-var" class="headerlink" title="1. var"></a>1. var</h3><p>首先看看ES5中得变量声明方式</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 2</span></code></pre>

<p>以上代码等同于</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    a <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre>

<blockquote>
<p>以上可知 ：</p>
<ol>
<li>在块内部定义变量 变量提升，到函数最顶部</li>
<li>通过var声明的变量，无论在何处声明，均为<strong>全局作用域</strong></li>
</ol>
</blockquote>
<h3 id="2-let-和-const"><a href="#2-let-和-const" class="headerlink" title="2.let 和 const"></a>2.let 和 const</h3><p>再来看看<code>ES6</code>中的<code>let</code>和<code>const</code></p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// b is not defined</span></code></pre>

<blockquote>
<p>此时在{} 外部访问b 将会报错，因为 let 的作用域仅为 <code>&#123; &#125; </code>的内部，及<strong>块级作用域</strong></p>
</blockquote>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// c is not defined</span></code></pre>

<blockquote>
<p>从上面可知 const 也是也仅为块级作用域</p>
<p><strong>const的作用域与let作用域相同：只在声明所在的块级作用域内有效</strong></p>
</blockquote>
<p>让我们看看const 更多的特性：</p>
<p><strong>const 表示常量：</strong></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token number">2</span>
d <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">// Assignment to constant variable.</span></code></pre>

<blockquote>
<p>此时，当 d 为 <strong>基本数据类型</strong>的时候，改变其值，将会报错！！！</p>
</blockquote>
<p><strong>但是它的常量仅仅表示的是地址常量 对象的成员可以改变值</strong></p>
<p>看看下面的例子：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> people <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">&#125;</span>
people<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span> <span class="token comment">// &#123;name: "张三", age: 25&#125;</span></code></pre>

<p>看看此时 <strong>people</strong>已经被改变了</p>
<p><strong>why?</strong></p>
<blockquote>
<p>对象是复杂的数据类型 它的地址保存在 栈里面， 值保存在堆里面</p>
<p>cosnt仅仅是保证这个地址不改变，至于地址对应的数据，是可以进行改变的</p>
<p>基本类型值在内存中占据固定大小的空间 因此被保存在栈内存中。比如 const a = 1 ; 这时候其直接保存在栈里面</p>
</blockquote>
<h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><h3 id="1-字符串拼接"><a href="#1-字符串拼接" class="headerlink" title="1. 字符串拼接"></a>1. 字符串拼接</h3><h4 id="ES5中字符串拼接"><a href="#ES5中字符串拼接" class="headerlink" title="ES5中字符串拼接"></a>ES5中字符串拼接</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES5 </span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Hunter'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello '</span> <span class="token operator">+</span> name<span class="token punctuation">)</span></code></pre>

<h4 id="ES6中字符串拼接"><a href="#ES6中字符串拼接" class="headerlink" title="ES6中字符串拼接"></a>ES6中字符串拼接</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES6</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Hunter'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// hello Hunter</span></code></pre>

<p><strong>注意</strong>：用 <code>$&#123;&#125;</code>来拼接字符串，注意此时要使用 ``` `（反单引号）; 如下所示： 单引号将无法将其转义</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello $&#123;name&#125;'</span><span class="token punctuation">)</span> <span class="token comment">// hello $&#123;name&#125;</span></code></pre>

<h4 id="ES6的字符串换行"><a href="#ES6的字符串换行" class="headerlink" title="ES6的字符串换行"></a>ES6的字符串换行</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES5</span>
    <span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token string">"&lt;div> \
                        &lt;span>hello world&lt;/span> \
                    &lt;/div>"</span>
<span class="token comment">// ES6</span>
    <span class="token keyword">let</span> template2 <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div> 
                        &lt;span>hello world&lt;/span>
                    &lt;/div></span><span class="token template-punctuation string">`</span></span></code></pre>

<blockquote>
<p>ES5中需要用反斜杠来进行多行字符串拼接，ES6直接使用 ``` `(反单引号）</p>
</blockquote>
<h3 id="2-字符串方法"><a href="#2-字符串方法" class="headerlink" title="2. 字符串方法"></a>2. 字符串方法</h3><h4 id="padStart-和-padEnd"><a href="#padStart-和-padEnd" class="headerlink" title="padStart() 和 padEnd()"></a>padStart() 和 padEnd()</h4><blockquote>
<p>ES6 引入了字符串补全长度的功能，如果某个字符串不够指定长度，会在头部或者尾部补全。</p>
<p><code>padStart()</code> 用于<strong>头部补全</strong>；</p>
<p><code>padEnd()</code> 用于<strong>尾部补全</strong>。</p>
</blockquote>
<p>如下一个例子：<a href="https://link.segmentfault.com/?enc=s/4vgLhRUyDoiV6EE9xmDg==.5gVHrKgFETCAcBlABIaC7y5JThUkPAsvADpfs5X6kXzoKxzVYMPeX+/Cv8BC0+go">例子来源</a></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
       <span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">const</span> hours <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">const</span> minutes <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token keyword">const</span> seconds <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hours<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>minutes<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>seconds<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></code></pre>

<blockquote>
<p>先不管箭头函数</p>
</blockquote>
<p>看看其中的<code>hours.padStart(2,0)</code> , 表示当小时不够两位数时，在前面补0，如<code>8</code>，补充成 <code>08</code></p>
<p>后面遇到更多的字符串函数会补充</p>
<h2 id="三、变量的解构赋值"><a href="#三、变量的解构赋值" class="headerlink" title="三、变量的解构赋值"></a>三、变量的解构赋值</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES5</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre>

<h3 id="1-ES6数组解构赋值"><a href="#1-ES6数组解构赋值" class="headerlink" title="1.ES6数组解构赋值"></a>1.ES6数组解构赋值</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>c<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 1 2 3</span></code></pre>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>d <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>d<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>e<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 2 3</span></code></pre>

<blockquote>
<p>当赋值为<code>undefined</code>时取默认值 当赋值为其他的有效值或者<code>null</code>时 取所赋值的值</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>f <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> g <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>f<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>g<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// null 4</span></code></pre>

<h3 id="2-对象解构赋值"><a href="#2-对象解构赋值" class="headerlink" title="2.对象解构赋值"></a>2.对象解构赋值</h3><blockquote>
<p>数组按照顺序解构 对象按照key值进行解构</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">'hello'</span><span class="token punctuation">&#125;</span> <span class="token comment">//可以调换位置</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>foo<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bar<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token comment">// hi hello</span></code></pre>

<blockquote>
<p>注意：先定义再解构需要在解构语句那块加上圆括号</p>
</blockquote>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> soso<span class="token punctuation">;</span>
<span class="token comment">// &#123; soso &#125; = &#123; soso: "hi"&#125;; // 错误</span>
<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> soso <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">soso</span><span class="token operator">:</span> <span class="token string">"hi"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得加上圆括号 ()</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>soso<span class="token punctuation">)</span> <span class="token comment">// hi</span></code></pre>

<h3 id="3-字符串的解构赋值"><a href="#3-字符串的解构赋值" class="headerlink" title="3.字符串的解构赋值"></a>3.字符串的解构赋值</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>h<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>h<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>j<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>k<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>l<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span></code></pre>

]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>es6</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2-给组件绑定原生事件</title>
    <url>/2019/03/24/90324.html</url>
    <content><![CDATA[<h1 id="Vue2-给组件绑定原生事件"><a href="#Vue2-给组件绑定原生事件" class="headerlink" title="Vue2-给组件绑定原生事件"></a>Vue2-给组件绑定原生事件</h1><h4 id="在组件上设置点击事件"><a href="#在组件上设置点击事件" class="headerlink" title="在组件上设置点击事件"></a>在组件上设置点击事件</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span>  <span class="token operator">></span>
       <span class="token operator">&lt;</span>child @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

   <span class="token operator">&lt;</span>script<span class="token operator">></span>
     
       Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
           <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>Child&lt;/div></span><span class="token template-punctuation string">`</span></span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
           <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
           <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
               <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>
               <span class="token punctuation">&#125;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p>显然在Root组件中不能被触发，因为这时候 组件<code>child</code>上的<code>click</code>相当于自定义的一个事件，这时候需要通过<code>this.$emit</code>去触发自定义事件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span>  <span class="token operator">></span>
    <span class="token operator">&lt;</span>child  @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
  
    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div  @click="handleClick">Child&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<blockquote>
<p>这时候就实现了点击事件，但是究其根本，这还是自定义事件，太过麻烦。</p>
</blockquote>
<h4 id="给组件绑定原生事件"><a href="#给组件绑定原生事件" class="headerlink" title="给组件绑定原生事件"></a>给组件绑定原生事件</h4><blockquote>
<p>非常简单：只要在事件绑定后面加上<code>.native</code> 的修饰符就可以了</p>
</blockquote>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span>  <span class="token operator">></span>
       <span class="token operator">&lt;</span>child  @click<span class="token punctuation">.</span>native<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
       Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>
           <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div >Child&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
           <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>
           <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
               <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span>
               <span class="token punctuation">&#125;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 表情大全</title>
    <url>/2020/01/20/80.html</url>
    <content><![CDATA[<h1 id="markdown-表情大全"><a href="#markdown-表情大全" class="headerlink" title="markdown 表情大全"></a>markdown 表情大全</h1><h2 id="markdown表情"><a href="#markdown表情" class="headerlink" title="markdown表情"></a>markdown表情</h2><p>该文是搜集的网络资源整理，为了写博客需要用到一些有趣的表情，特此记录<br>将对应emoji表情的符号码复制后输入你的markdown文本即可显示emoji表情。<br>如​<code>:blush:​</code>，显示为😊</p>
<h3 id="人物"><a href="#人物" class="headerlink" title="人物"></a>人物</h3><table>
<thead>
<tr>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
<th align="center">syntax</th>
<th align="center">preview</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>:bowtie:</code></td>
<td align="center">:bowtie:</td>
<td align="center"><code>:smile:</code></td>
<td align="center">:smile:</td>
<td align="center"><code>:laughing:</code></td>
<td align="center">:laughing:</td>
</tr>
<tr>
<td align="center"><code>:blush:</code></td>
<td align="center">😊</td>
<td align="center"><code>:smiley:</code></td>
<td align="center">😃</td>
<td align="center"><code>:relaxed:</code></td>
<td align="center">☺️</td>
</tr>
<tr>
<td align="center"><code>:smirk:</code></td>
<td align="center">😏</td>
<td align="center"><code>:heart_eyes:</code></td>
<td align="center">😍</td>
<td align="center"><code>:kissing_heart:</code></td>
<td align="center">😘</td>
</tr>
<tr>
<td align="center"><code>:kissing_closed_eyes:</code></td>
<td align="center">😚</td>
<td align="center"><code>:flushed:</code></td>
<td align="center">😳</td>
<td align="center"><code>:relieved:</code></td>
<td align="center">😌</td>
</tr>
<tr>
<td align="center"><code>:satisfied:</code></td>
<td align="center">😆</td>
<td align="center"><code>:grin:</code></td>
<td align="center">😁</td>
<td align="center"><code>:wink:</code></td>
<td align="center">😉</td>
</tr>
<tr>
<td align="center"><code>:stuck_out_tongue_winking_eye:</code></td>
<td align="center">😜</td>
<td align="center"><code>:stuck_out_tongue_closed_eyes:</code></td>
<td align="center">😝</td>
<td align="center"><code>:grinning:</code></td>
<td align="center">😀</td>
</tr>
<tr>
<td align="center"><code>:kissing:</code></td>
<td align="center">😗</td>
<td align="center"><code>:kissing_smiling_eyes:</code></td>
<td align="center">😙</td>
<td align="center"><code>:stuck_out_tongue:</code></td>
<td align="center">😛</td>
</tr>
<tr>
<td align="center"><code>:sleeping:</code></td>
<td align="center">😴</td>
<td align="center"><code>:worried:</code></td>
<td align="center">😟</td>
<td align="center"><code>:frowning:</code></td>
<td align="center">😦</td>
</tr>
<tr>
<td align="center"><code>:anguished:</code></td>
<td align="center">😧</td>
<td align="center"><code>:open_mouth:</code></td>
<td align="center">😮</td>
<td align="center"><code>:grimacing:</code></td>
<td align="center">😬</td>
</tr>
<tr>
<td align="center"><code>:confused:</code></td>
<td align="center">😕</td>
<td align="center"><code>:hushed:</code></td>
<td align="center">😯</td>
<td align="center"><code>:expressionless:</code></td>
<td align="center">😑</td>
</tr>
<tr>
<td align="center"><code>:unamused:</code></td>
<td align="center">😒</td>
<td align="center"><code>:sweat_smile:</code></td>
<td align="center">😅</td>
<td align="center"><code>:sweat:</code></td>
<td align="center">😓</td>
</tr>
<tr>
<td align="center"><code>:disappointed_relieved:</code></td>
<td align="center">😥</td>
<td align="center"><code>:weary:</code></td>
<td align="center">😩</td>
<td align="center"><code>:pensive:</code></td>
<td align="center">😔</td>
</tr>
<tr>
<td align="center"><code>:disappointed:</code></td>
<td align="center">😞</td>
<td align="center"><code>:confounded:</code></td>
<td align="center">😖</td>
<td align="center"><code>:fearful:</code></td>
<td align="center">😨</td>
</tr>
<tr>
<td align="center"><code>:cold_sweat:</code></td>
<td align="center">😰</td>
<td align="center"><code>:persevere:</code></td>
<td align="center">😣</td>
<td align="center"><code>:cry:</code></td>
<td align="center">😢</td>
</tr>
<tr>
<td align="center"><code>:sob:</code></td>
<td align="center">😭</td>
<td align="center"><code>:joy:</code></td>
<td align="center">😂</td>
<td align="center"><code>:astonished:</code></td>
<td align="center">😲</td>
</tr>
<tr>
<td align="center"><code>:scream:</code></td>
<td align="center">😱</td>
<td align="center"><code>:neckbeard:</code></td>
<td align="center">:neckbeard:</td>
<td align="center"><code>:tired_face:</code></td>
<td align="center">😫</td>
</tr>
<tr>
<td align="center"><code>:angry:</code></td>
<td align="center">😠</td>
<td align="center"><code>:rage:</code></td>
<td align="center">😡</td>
<td align="center"><code>:triumph:</code></td>
<td align="center">😤</td>
</tr>
<tr>
<td align="center"><code>:sleepy:</code></td>
<td align="center">😪</td>
<td align="center"><code>:yum:</code></td>
<td align="center">😋</td>
<td align="center"><code>:mask:</code></td>
<td align="center">😷</td>
</tr>
<tr>
<td align="center"><code>:sunglasses:</code></td>
<td align="center">😎</td>
<td align="center"><code>:dizzy_face:</code></td>
<td align="center">😵</td>
<td align="center"><code>:imp:</code></td>
<td align="center">👿</td>
</tr>
<tr>
<td align="center"><code>:smiling_imp:</code></td>
<td align="center">😈</td>
<td align="center"><code>:neutral_face:</code></td>
<td align="center">😐</td>
<td align="center"><code>:no_mouth:</code></td>
<td align="center">😶</td>
</tr>
<tr>
<td align="center"><code>:innocent:</code></td>
<td align="center">😇</td>
<td align="center"><code>:alien:</code></td>
<td align="center">👽</td>
<td align="center"><code>:yellow_heart:</code></td>
<td align="center">💛</td>
</tr>
<tr>
<td align="center"><code>:blue_heart:</code></td>
<td align="center">💙</td>
<td align="center"><code>:purple_heart:</code></td>
<td align="center">💜</td>
<td align="center"><code>:heart:</code></td>
<td align="center">❤️</td>
</tr>
<tr>
<td align="center"><code>:green_heart:</code></td>
<td align="center">💚</td>
<td align="center"><code>:broken_heart:</code></td>
<td align="center">💔</td>
<td align="center"><code>:heartbeat:</code></td>
<td align="center">💓</td>
</tr>
<tr>
<td align="center"><code>:heartpulse:</code></td>
<td align="center">💗</td>
<td align="center"><code>:two_hearts:</code></td>
<td align="center">💕</td>
<td align="center"><code>:revolving_hearts:</code></td>
<td align="center">💞</td>
</tr>
<tr>
<td align="center"><code>:cupid:</code></td>
<td align="center">💘</td>
<td align="center"><code>:sparkling_heart:</code></td>
<td align="center">💖</td>
<td align="center"><code>:sparkles:</code></td>
<td align="center">✨</td>
</tr>
<tr>
<td align="center"><code>:star:</code></td>
<td align="center">⭐</td>
<td align="center"><code>:star2:</code></td>
<td align="center">🌟</td>
<td align="center"><code>:dizzy:</code></td>
<td align="center">💫</td>
</tr>
<tr>
<td align="center"><code>:boom:</code></td>
<td align="center">💥</td>
<td align="center"><code>:collision:</code></td>
<td align="center">💥</td>
<td align="center"><code>:anger:</code></td>
<td align="center">💢</td>
</tr>
<tr>
<td align="center"><code>:exclamation:</code></td>
<td align="center">❗</td>
<td align="center"><code>:question:</code></td>
<td align="center">❓</td>
<td align="center"><code>:grey_exclamation:</code></td>
<td align="center">❕</td>
</tr>
<tr>
<td align="center"><code>:grey_question:</code></td>
<td align="center">❔</td>
<td align="center"><code>:zzz:</code></td>
<td align="center">💤</td>
<td align="center"><code>:dash:</code></td>
<td align="center">💨</td>
</tr>
<tr>
<td align="center"><code>:sweat_drops:</code></td>
<td align="center">💦</td>
<td align="center"><code>:notes:</code></td>
<td align="center">🎶</td>
<td align="center"><code>:musical_note:</code></td>
<td align="center">🎵</td>
</tr>
<tr>
<td align="center"><code>:fire:</code></td>
<td align="center">🔥</td>
<td align="center"><code>:hankey:</code></td>
<td align="center">💩</td>
<td align="center"><code>:poop:</code></td>
<td align="center">💩</td>
</tr>
<tr>
<td align="center"><code>::</code></td>
<td align="center">💩</td>
<td align="center"><code>:+1:</code></td>
<td align="center">👍</td>
<td align="center"><code>:thumbsup:</code></td>
<td align="center">👍</td>
</tr>
<tr>
<td align="center"><code>:-1:</code></td>
<td align="center">👎</td>
<td align="center"><code>:thumbsdown:</code></td>
<td align="center">👎</td>
<td align="center"><code>:ok_hand:</code></td>
<td align="center">👌</td>
</tr>
<tr>
<td align="center"><code>:punch:</code></td>
<td align="center">👊</td>
<td align="center"><code>:facepunch:</code></td>
<td align="center">👊</td>
<td align="center"><code>:fist:</code></td>
<td align="center">✊</td>
</tr>
<tr>
<td align="center"><code>:v:</code></td>
<td align="center">✌️</td>
<td align="center"><code>:wave:</code></td>
<td align="center">👋</td>
<td align="center"><code>:hand:</code></td>
<td align="center">✋</td>
</tr>
<tr>
<td align="center"><code>:raised_hand:</code></td>
<td align="center">✋</td>
<td align="center"><code>:open_hands:</code></td>
<td align="center">👐</td>
<td align="center"><code>:point_up:</code></td>
<td align="center">☝️</td>
</tr>
<tr>
<td align="center"><code>:point_down:</code></td>
<td align="center">👇</td>
<td align="center"><code>:point_left:</code></td>
<td align="center">👈</td>
<td align="center"><code>:point_right:</code></td>
<td align="center">👉</td>
</tr>
<tr>
<td align="center"><code>:raised_hands:</code></td>
<td align="center">🙌</td>
<td align="center"><code>:pray:</code></td>
<td align="center">🙏</td>
<td align="center"><code>:point_up_2:</code></td>
<td align="center">👆</td>
</tr>
<tr>
<td align="center"><code>:clap:</code></td>
<td align="center">👏</td>
<td align="center"><code>:muscle:</code></td>
<td align="center">💪</td>
<td align="center"><code>:metal:</code></td>
<td align="center">🤘</td>
</tr>
<tr>
<td align="center"><code>:fu:</code></td>
<td align="center">🖕</td>
<td align="center"><code>:walking:</code></td>
<td align="center">🚶</td>
<td align="center"><code>:runner:</code></td>
<td align="center">🏃</td>
</tr>
<tr>
<td align="center"><code>:running:</code></td>
<td align="center">🏃</td>
<td align="center"><code>:couple:</code></td>
<td align="center">👫</td>
<td align="center"><code>:family:</code></td>
<td align="center">👪</td>
</tr>
<tr>
<td align="center"><code>:two_men_holding_hands:</code></td>
<td align="center">👬</td>
<td align="center"><code>:two_women_holding_hands:</code></td>
<td align="center">👭</td>
<td align="center"><code>:dancer:</code></td>
<td align="center">💃</td>
</tr>
<tr>
<td align="center"><code>:dancers:</code></td>
<td align="center">👯</td>
<td align="center"><code>:ok_woman:</code></td>
<td align="center">🙆</td>
<td align="center"><code>:no_good:</code></td>
<td align="center">🙅</td>
</tr>
<tr>
<td align="center"><code>:information_desk_person:</code></td>
<td align="center">💁</td>
<td align="center"><code>:raising_hand:</code></td>
<td align="center">🙋</td>
<td align="center"><code>:bride_with_veil:</code></td>
<td align="center">👰</td>
</tr>
<tr>
<td align="center"><code>:person_with_pouting_face:</code></td>
<td align="center">🙎</td>
<td align="center"><code>:person_frowning:</code></td>
<td align="center">🙍</td>
<td align="center"><code>:bow:</code></td>
<td align="center">🙇</td>
</tr>
<tr>
<td align="center"><code>:couplekiss:</code></td>
<td align="center">💏</td>
<td align="center"><code>:couple_with_heart:</code></td>
<td align="center">💑</td>
<td align="center"><code>:massage:</code></td>
<td align="center">💆</td>
</tr>
<tr>
<td align="center"><code>:haircut:</code></td>
<td align="center">💇</td>
<td align="center"><code>:nail_care:</code></td>
<td align="center">💅</td>
<td align="center"><code>:boy:</code></td>
<td align="center">👦</td>
</tr>
<tr>
<td align="center"><code>:girl:</code></td>
<td align="center">👧</td>
<td align="center"><code>:woman:</code></td>
<td align="center">👩</td>
<td align="center"><code>:man:</code></td>
<td align="center">👨</td>
</tr>
<tr>
<td align="center"><code>:baby:</code></td>
<td align="center">👶</td>
<td align="center"><code>:older_woman:</code></td>
<td align="center">👵</td>
<td align="center"><code>:older_man:</code></td>
<td align="center">👴</td>
</tr>
<tr>
<td align="center"><code>:person_with_blond_hair:</code></td>
<td align="center">👱</td>
<td align="center"><code>:man_with_gua_pi_mao:</code></td>
<td align="center">👲</td>
<td align="center"><code>:man_with_turban:</code></td>
<td align="center">:man_with_turban:</td>
</tr>
<tr>
<td align="center"><code>:construction_worker:</code></td>
<td align="center">👷</td>
<td align="center"><code>:cop:</code></td>
<td align="center">👮</td>
<td align="center"><code>:angel:</code></td>
<td align="center">:angel:</td>
</tr>
<tr>
<td align="center"><code>:princess:</code></td>
<td align="center">👸</td>
<td align="center"><code>:smiley_cat:</code></td>
<td align="center">😺</td>
<td align="center"><code>:smile_cat:</code></td>
<td align="center">:smile_cat:</td>
</tr>
<tr>
<td align="center"><code>:heart_eyes_cat:</code></td>
<td align="center">😻</td>
<td align="center"><code>:kissing_cat:</code></td>
<td align="center">😽</td>
<td align="center"><code>:smirk_cat:</code></td>
<td align="center">:smirk_cat:</td>
</tr>
<tr>
<td align="center"><code>:scream_cat:</code></td>
<td align="center">🙀</td>
<td align="center"><code>:crying_cat_face:</code></td>
<td align="center">😿</td>
<td align="center"><code>:joy_cat:</code></td>
<td align="center">:joy_cat:</td>
</tr>
<tr>
<td align="center"><code>:pouting_cat:</code></td>
<td align="center">😾</td>
<td align="center"><code>:japanese_ogre:</code></td>
<td align="center">👹</td>
<td align="center"><code>:japanese_goblin:</code></td>
<td align="center">👺</td>
</tr>
<tr>
<td align="center"><code>:see_no_evil:</code></td>
<td align="center">🙈</td>
<td align="center"><code>:hear_no_evil:</code></td>
<td align="center">🙉</td>
<td align="center"><code>:speak_no_evil:</code></td>
<td align="center">🙊</td>
</tr>
<tr>
<td align="center"><code>:guardsman:</code></td>
<td align="center">💂</td>
<td align="center"><code>:skull:</code></td>
<td align="center">💀</td>
<td align="center"><code>:feet:</code></td>
<td align="center">🐾</td>
</tr>
<tr>
<td align="center"><code>:lips:</code></td>
<td align="center">👄</td>
<td align="center"><code>:kiss:</code></td>
<td align="center">💋</td>
<td align="center"><code>:droplet:</code></td>
<td align="center">💧</td>
</tr>
<tr>
<td align="center"><code>:ear:</code></td>
<td align="center">👂</td>
<td align="center"><code>:eyes:</code></td>
<td align="center">👀</td>
<td align="center"><code>:nose:</code></td>
<td align="center">👃</td>
</tr>
<tr>
<td align="center"><code>:tongue:</code></td>
<td align="center">👅</td>
<td align="center"><code>:love_letter:</code></td>
<td align="center">💌</td>
<td align="center"><code>:bust_in_silhouette:</code></td>
<td align="center">👤</td>
</tr>
<tr>
<td align="center"><code>:busts_in_silhouette:</code></td>
<td align="center">👥</td>
<td align="center"><code>:speech_balloon:</code></td>
<td align="center">💬</td>
<td align="center"><code>:thought_balloon:</code></td>
<td align="center">💭</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>emoji</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈正则表达式中的分组和引用</title>
    <url>/2019/05/01/90501.html</url>
    <content><![CDATA[<h1 id="浅谈正则表达式中的分组和引用"><a href="#浅谈正则表达式中的分组和引用" class="headerlink" title="浅谈正则表达式中的分组和引用"></a>浅谈正则表达式中的分组和引用</h1><p>由正则表达式如何匹配相同字符出发，讲讲正则表达式中的选择、分组和引用。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在外刊君读者群中看到有人提出这样的一个需求：</p>
<blockquote>
<p>把字符串切成连续相同字符的正则怎么写？比如<code>abbcccdddd</code>切成<code>a,bb,ccc,dddd</code></p>
</blockquote>
<p>之前我对正则表达式也是略有研究，想尝试一下。其实我对正则表达式的学习基本完全来源于犀牛书的第10章，真正看懂这一章，我觉得操作正则表达式应该不在话下。</p>
<h2 id="我的答案"><a href="#我的答案" class="headerlink" title="我的答案"></a>我的答案</h2><p>先给出我的答案吧：</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token string">'abbccddd'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\w)\1*</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token comment">// ["a", "bb", "cc", "ddd"]</span></code></pre>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>拿到这个问题，首先要匹配字符<code>[a-zA-Z0-9]</code>，这里直接使用<code>\w</code>。然后是全局匹配，在最后加上<code>g</code>。难点在于怎么判断重复。</p>
<p>翻看了犀牛书后，又读了一遍分组和引用的部分。使用小括号<code>()</code>将字符作为一个最小单元，同时小括号还能记忆这个组合相匹配的字符串。再使用反斜杠<code>\</code>引用前面分组的表达式，数字1表示第一个小括号。这时完成了2个字符重复的要求。最后再使用<code>*</code>来匹配出现0次或n次。这个正则表达式就写完了。</p>
<p>下面详细说说分组和引用。</p>
<p><strong>正则表达式的选择、分组和引用字符表</strong></p>
<table>
<thead>
<tr>
<th>|</th>
<th>选择，匹配的是该符号左边的子表达式或右边的子表达式</th>
</tr>
</thead>
<tbody><tr>
<td>(…)</td>
<td>组合，将几个项组合为一个单元，这个单元可通过<code>*</code> <code>+</code> <code>?</code> `</td>
</tr>
<tr>
<td>(?:…)</td>
<td>只组合，把项组合到一个段元，但不记忆与该组相匹配的字符</td>
</tr>
<tr>
<td>\n</td>
<td>和第n个分组第一次匹配的字符相匹配，组是圆括号中的子表达式（也有可能是嵌套的），组索引是从左到右的左括号数，<code>(?:</code>形式的分组不编码</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Regular</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 React 基础</title>
    <url>/2021/03/14/135600.html</url>
    <content><![CDATA[<h2 id="React-基本概述"><a href="#React-基本概述" class="headerlink" title="React 基本概述"></a>React 基本概述</h2><h3 id="React-背景"><a href="#React-背景" class="headerlink" title="React 背景"></a>React 背景</h3><p><a href="https://react.docschina.org/">React</a> 起源于 Facebook(Meta) 的内部项目（2011，News Feed），之后又被用来开发网站（2012，Instagram），并于 2013 年 5 月开源。</p>
<h3 id="React-是什么"><a href="#React-是什么" class="headerlink" title="React 是什么"></a>React 是什么</h3><p><a href="https://react.docschina.org/">React</a> 是一个用于构建<strong>用户界面</strong>的 JavaScript <strong>库</strong>。</p>
<ul>
<li>用户界面：HTML 界面。</li>
<li>Library（库）和 Framework（框架）：库的特点是<strong>小而巧</strong>，针对特定问题的单一解决方案。框架的特点是<strong>大而全</strong>，提供了一整套的解决方案。</li>
</ul>
<h3 id="React-趋势"><a href="#React-趋势" class="headerlink" title="React 趋势"></a>React 趋势</h3><p>从 <a href="https://www.npmtrends.com/angular-vs-react-vs-vue">NPM 下载量</a> 来看，React &gt; Vue &gt; Angular。</p>
<h3 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h3><p><strong>声明式</strong></p>
<p>只需要描述UI（HTML）看起来是什么样子，就像写 HTML 一样简单，React 内部负责渲染 UI，并在数据变化时自动更新 UI。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> jsx <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'app'</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello World！<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span>动态数据：<span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">)</span></code></pre>

<p><strong>组件化</strong></p>
<p>把复杂的页面拆分成一个一个的单元，这些组成页面的基本单元就是组件，通过组合、复用组件来编写复杂界面的方式，就是组件化。</p>
<p><strong>小结：</strong></p>
<p>使用 React 除了可以开发 Web 应用，还可以使用 React Native 开发原生移动应用，甚至可以开发 VR（虚拟现实）应用（React 360）。</p>
<p>相比较于 Vue，React 强调尽可能的利用 JS 语言自身的能力来编写 UI，而不是通过造轮子增强 HTML 的功能。</p>
<h3 id="脚手架创建项目"><a href="#脚手架创建项目" class="headerlink" title="脚手架创建项目"></a>脚手架创建项目</h3><p><strong>脚手架意义</strong></p>
<p>现代的 Web 应用要考虑的问题很多，除了编写业务代码之外，还要考虑代码规范、预编译、压缩合并、打包上线等工作，需要有一套完整的解决方案来辅助我们快速开发，而 <a href="https://create-react-app.dev/">React 脚手架</a> 就是这么一套完整的解决方案，它零配置，开箱即用，让我们从繁杂的 Webpack 配置当中解脱出来，更关注于业务本身。</p>
<p>使用 <a href="https://create-react-app.dev/">create-react-app</a> 这个命令行工具，它是 React 官方团队出的一个构建 React 应用的脚手架工具。</p>
<p><strong>方法一</strong></p>
<ol>
<li>全局安装<code>npm i -g create-react-app</code>或者<code>yarn global add create-react-app</code>。</li>
<li>初始化项目<code>create-react-app my-app</code>，my-app 表示项目名称，可以修改。</li>
<li>启动项目：<code>yarn start</code>or <code>npm start</code>。</li>
</ol>
<p>🙁 缺点：全局安装命令无法保证命令一直是最新版本。</p>
<p><strong>方法二（推荐）</strong></p>
<ol>
<li>命令：<code>npx create-react-app react-basic</code>。</li>
<li>启动项目：<code>yarn start</code> or <code>npm start</code>。</li>
<li>npx 是 <code>npm@v5.2</code> 版本新添加的命令，用来简化 npm 工具包的使用流程。</li>
</ol>
<p>😄 优点：<code>npx</code> 会调用最新的 <code>create-react-app</code> 直接创建 React 项目。</p>
<h3 id="渲染-Hello-World"><a href="#渲染-Hello-World" class="headerlink" title="渲染 Hello World"></a>渲染 Hello World</h3><img src="https://zhihur.com/resource/images/ifer_hello_world.png">

<p><strong>步骤</strong></p>
<ol>
<li>删除 <code>src</code> 和 <code>public</code> 目录中的所有内容。</li>
<li>新建 <code>public/index.html</code>。</li>
<li>新建 <code>src/index.js</code> 文件。</li>
<li>引入 React 核心库和涉及 DOM 操作的包。</li>
<li>调用 <code>React.createElement()</code> 方法创建 React 元素。</li>
<li>调用 <code>ReactDOM.render()</code> 方法渲染 React 元素到页面。</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol>
<li>删除 <code>src</code> 和 <code>public</code> 目录中的所有内容。</li>
<li>新建 <code>public/index.html</code>。</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>
<span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>head<span class="token operator">></span>
        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>

    <span class="token operator">&lt;</span>body<span class="token operator">></span>
        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>

<ol start="3">
<li><p>新建 <code>src/index.js</code> 文件。</p>
</li>
<li><p>引入 React 核心库和涉及 DOM 操作的包。</p>
</li>
</ol>
<p><code>src/index.js</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// create-react-app 脚手架生成的项目中已经下载好了 react 和 react-dom，无需重复下载，直接使用即可</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span></code></pre>

<ol start="5">
<li>调用 <code>React.createElement()</code> 方法创建 React 元素。</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 标签名、标签属性、标签内容，返回的是一个 React 元素（虚拟 DOM）</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'Hello World'</span><span class="token punctuation">)</span></code></pre>



<ol start="6">
<li>调用 <code>ReactDOM.render()</code> 方法渲染 React 元素到页面。</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h3 id="React-createElement-📝"><a href="#React-createElement-📝" class="headerlink" title="React.createElement() 📝"></a>React.createElement() 📝</h3><p>如何用 <code>React.createElement()</code> 创建出如下结构？</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"wrap"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>ul<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>React<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>Vue<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>Angular<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>

<p><strong>重点</strong></p>
<pre class="language-js" data-language="js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> 标签上的属性<span class="token number">1</span>：值<span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 子元素<span class="token number">1</span><span class="token punctuation">,</span> 子元素<span class="token number">2</span><span class="token punctuation">)</span></code></pre>

<p>如果有更复杂的就需要使用 JSX</p>
<h3 id="JSX-基本介绍"><a href="#JSX-基本介绍" class="headerlink" title="JSX 基本介绍"></a>JSX 基本介绍</h3><p><code>React.createElement()</code> 创建 React 元素的问题：繁琐/不简洁；不直观，无法一眼看出所描述的结构；代码不容易维护！</p>
<pre class="language-js" data-language="js"><code class="language-js">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
    <span class="token string">'div'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">'wrap'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'React'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'Vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'Angular'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre>

<p>对比下面 JSX 的写法</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"wrap"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>ul<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>React<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>Vue<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>li<span class="token operator">></span>Angular<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>

<p><strong>JSX 是什么</strong></p>
<p>JSX 是 JavaScript XML 的简写，表示可以在 JavaScript 代码中写 XML（HTML） 格式的代码。</p>
<p>优势：声明式语法更加直观，与 HTML 结构相同，降低了学习成本，提高了开发效率，JSX 是 React 的核心之一。</p>
<p><strong>JSX 基本使用</strong></p>
<ol>
<li>使用 JSX 创建 React 元素</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello <span class="token constant">JSX</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre>



<ol start="2">
<li>使用 <code>ReactDOM.render()</code> 方法渲染 React 元素到页面中</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p><strong>JSX 是如何工作的</strong></p>
<p>🤔 换句话说，JSX 并不是标准的 ECMAScript 语法，为什么 React 脚手架中可以直接使用 JSX 呢？</p>
<ul>
<li>JSX 需要使用 Babel 编译成 <code>React.createElement()</code> 的形式，然后配合 React 才能在浏览器中使用，而 <code>create-react-app</code> 脚手架中已经内置了 Babel 及相关配置。</li>
<li>编译 JSX 语法的包为：<a href="https://www.npmjs.com/package/@babel/preset-react">@babel/preset-react</a>，<a href="https://www.babeljs.cn/repl#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.6&spec=false&loose=false&code_lz=DwCwjAfAEgpgNnA9gAgFIGUAawD04JA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=env%2Creact%2Cstage-2&prettier=false&targets=&version=7.16.2&externalPlugins=&assumptions=%7B%7D">在线体验</a>。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'wrap'</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello World<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span>React<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token punctuation">)</span></code></pre>

<ol>
<li>必须有 1 个根节点，或者虚拟根节点 <code>&lt;&gt;&lt;/&gt;</code>、<code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code>。</li>
<li>属性名一般是驼峰的写法且不能是 JS 中的关键字，例如 class 改成 className，label 的 for 属性改为 <code>htmlFor</code>，colspan 改为 <code>colSpan</code>。</li>
<li>元素若没有子节点，可以使用单标签，但一定要闭合，例如 <code>&lt;span/&gt;</code>。</li>
<li><code>React@16.14</code> 之前需要先引入 React 才能使用 JSX（这个也好理解，因为 JSX 最后还是要被转成 <code>React.createElement()</code> 的形式）。</li>
<li>换行建议使用 <code>()</code> 进行包裹，防止换行的时候<a href="https://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi">自动插入分号</a>的 Bug。</li>
</ol>
<img src="https://zhihur.com/resource/images/ifer_bug.png">

<p><strong>使用表达式</strong></p>
<p><strong>单大括号</strong>中可以使用任意的表达式（可以产生结果的式子）。</p>
<ul>
<li>普通的简单数据类型。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'zs'</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>
        姓名：<span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> 年龄：<span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token punctuation">)</span></code></pre>



<ul>
<li>对象中的属性。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">brand</span><span class="token operator">:</span> <span class="token string">'玛莎拉蒂'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>汽车：<span class="token punctuation">&#123;</span>car<span class="token punctuation">.</span>brand<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre>



<ul>
<li>数组中的某一项甚至整个数组。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> friends <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>汽车：<span class="token punctuation">&#123;</span>friends<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre>



<ul>
<li>可以调用方法。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'你好'</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>姓名：<span class="token punctuation">&#123;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre>

<ul>
<li>JS 对象虽然也是表达式，但是不能直接嵌套在 <code>&#123;&#125;</code> 中，一般只会出现在 style 属性中。</li>
<li>JSX 本身也是表达式。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> span <span class="token operator">=</span> <span class="token operator">&lt;</span>span<span class="token operator">></span>我是一个span<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
<span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>盒子<span class="token punctuation">&#123;</span>span<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre>

<p><strong>小结</strong></p>
<ul>
<li>JSX 中可以包含任意的表达式（除了对象）。</li>
<li>JSX 中不能放语句，例如 <code>if</code>、<code>switch</code>、<code>for</code>、<code>while</code> 等。</li>
</ul>
<h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a><strong>列表渲染</strong></h4><p><strong>小试牛刀</strong></p>
<ul>
<li>后端返回的数据。</li>
</ul>
<pre class="language-none"><code class="language-none">const arr &#x3D; [
    &#123; id: 1, name: &#39;Vue&#39; &#125;,
    &#123; id: 2, name: &#39;React&#39; &#125;,
    &#123; id: 3, name: &#39;Angular&#39; &#125;,
]</code></pre>



<ul>
<li>期望实现的效果。</li>
</ul>
<img src="https://zhihur.com/resource/images/ifer_list_jsx.png">

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>手动拼接如下。</p>
<pre class="language-none"><code class="language-none">&lt;ul&gt;
    &lt;li&gt;&#123;list[0].name&#125;&lt;&#x2F;li&gt;
    &lt;li&gt;&#123;list[1].name&#125;&lt;&#x2F;li&gt;
    &lt;li&gt;&#123;list[2].name&#125;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;</code></pre>



<p>简化上面的代码：可以使用 <code>map()</code> 方法渲染一组数据。</p>
<pre class="language-none"><code class="language-none">import ReactDOM from &#39;react-dom&#39;

const list &#x3D; [
    &#123; id: 1, name: &#39;Vue&#39; &#125;,
    &#123; id: 2, name: &#39;React&#39; &#125;,
    &#123; id: 3, name: &#39;Angular&#39; &#125;,
]

const arrJsx &#x3D; list.map((item) &#x3D;&gt; &lt;li key&#x3D;&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;&#x2F;li&gt;)

const loadData &#x3D; () &#x3D;&gt; &#123;
    return &lt;ul&gt;&#123;arrJsx&#125;&lt;&#x2F;ul&gt;
&#125;

ReactDOM.render(loadData(), document.querySelector(&#39;#root&#39;))</code></pre>



<h3 id="关于-key"><a href="#关于-key" class="headerlink" title="关于 key"></a>关于 key</h3><ol>
<li>特点：key 值要保证唯一，尽量避免使用索引号，key 在最终的 HTML 结构中是看不见的。</li>
<li>加在哪里：<code>map()</code> 遍历谁，就把 key 加在谁上。</li>
<li>作用：React 内部用来进行<strong>性能优化</strong>时使用的，key 在最终的 HTML 结构中是看不见的。</li>
</ol>
<h3 id="渲染数据-📝"><a href="#渲染数据-📝" class="headerlink" title="渲染数据 📝"></a>渲染数据 📝</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'奔驰'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">11000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'宝马'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">13000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'法拉利'</span><span class="token punctuation">,</span> <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span></code></pre>

<p>需求：根据上面数据生成下面结果。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>ul<span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>h3<span class="token operator">></span>车名：奔驰<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span>价格：<span class="token number">11000</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>h3<span class="token operator">></span>车名：宝马<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span>价格：<span class="token number">13000</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span>li<span class="token operator">></span>
        <span class="token operator">&lt;</span>h3<span class="token operator">></span>车名：法拉利<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span>价格：<span class="token number">15000</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span></code></pre>

<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>ul<span class="token operator">></span>
        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token operator">></span>
          <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
          <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>price<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h2 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>掌握 React 中使用样式的两种方式。</p>
<h3 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h3><ul>
<li>语法</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>元素 style<span class="token operator">=</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span>css属性<span class="token number">1</span>：值<span class="token number">1</span><span class="token punctuation">,</span>css属性<span class="token number">2</span>：值<span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>元素<span class="token operator">></span></code></pre>

<ul>
<li>需求</li>
</ul>
<img src="https://zhihur.com/resource/images/react_style.png">

<ul>
<li>代码</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">lineHeight</span><span class="token operator">:</span> <span class="token string">'200px'</span><span class="token punctuation">,</span> <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">'black'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span> <span class="token literal-property property">textAlign</span><span class="token operator">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">></span>React<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>



<ul>
<li><p>注意点</p>
<p>a，为啥有两个<code>&#123;&#123; &#125;&#125;</code>，外层的 <code>&#123;&#125;</code> 表示要开始写 JS 表达式了，内层的 <code>&#123;&#125;</code> 表示是一个对象。</p>
<p>b，属性名是小驼峰格式，例如 <code>background-color</code> 需要写成 <code>backgroundColor</code>。</p>
<p>c，属性值是字符串，如果单位是 px，可以简写成数值。</p>
</li>
</ul>
<h3 id="className"><a href="#className" class="headerlink" title="className"></a>className</h3><ul>
<li>用 <code>className</code> 定义类名。</li>
<li>在 <code>src</code> 目录中准备 <code>index.css</code> 文件，然后在 <code>index.js</code> 文件中通过 <code>import &#39;./index.css&#39;</code> 引入文件。</li>
</ul>
<p><code>index.css</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token punctuation">.</span>title <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span>
    <span class="token literal-property property">color</span><span class="token operator">:</span> white<span class="token punctuation">;</span>
    background<span class="token operator">-</span>color<span class="token operator">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>index.js</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'./index.css'</span>
<span class="token punctuation">;</span><span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">'title'</span><span class="token operator">></span>Hello React<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>



<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>类名使用 <code>className</code>，<strong>推荐</strong>。</li>
<li>行内样式，<code>&lt;div style=&#123;&#123; color: 'red' &#125;&#125;&gt;Hello&lt;/div&gt;</code>。</li>
</ul>
]]></content>
      <categories>
        <category>React.js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 Vue3 基础</title>
    <url>/2021/08/21/27130.html</url>
    <content><![CDATA[<h1 id="学习-Vue3-基础"><a href="#学习-Vue3-基础" class="headerlink" title="学习 Vue3 基础"></a>学习 Vue3 基础</h1><h2 id="Vue3-基本概述"><a href="#Vue3-基本概述" class="headerlink" title="Vue3 基本概述"></a>Vue3 基本概述</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p><img src="https://s4.ax1x.com/2022/01/24/7TyMPs.png" width="200"></img></p>
<ul>
<li><p>2020 年 9 月 18 日，Vue 发布了 3.0 版本，代号：One Piece<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">（海贼王）</a>，周边生态原因，当时大多数开发者还处于观望状态。</p>
</li>
<li><p>现在主流组件库都已经发布了支持 Vue3.0 的版本，例如 <a href="https://element-plus.gitee.io/zh-CN/">Element Plus</a>、<a href="https://vant-contrib.gitee.io/vant/v3/#/zh-CN">Vant</a>、<a href="https://vueuse.org/">Vue Use</a>，其他生态也在不断地完善中，所以 Vue3 是趋势。</p>
</li>
<li><p>2022 年 2 月 7 日开始，<a href="https://zhuanlan.zhihu.com/p/460055155">Vue3 也将成为新的默认版本</a>。</p>
</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>Composition API，能够更好的组织、封装、复用代码、RFCs。</p>
</li>
<li><p>性能：打包大小减少 41% 、初次渲染快 55% 、更新渲染快 133%、内存减少 54%，主要原因在于 Proxy，VNode，<a href="https://v3.cn.vuejs.org/guide/migration/global-api-treeshaking.html#_2-x-%E8%AF%AD%E6%B3%95">Tree Shaking support</a>。</p>
</li>
<li><p>Better TS support，<a href="https://github.com/vuejs/vue-next">源码</a>。</p>
</li>
<li><p>新特性：Fragment、Teleport、Suspense。</p>
</li>
<li><p>趋势：未来肯定会有越来越多的企业使用 Vue3.0 + TS 进行大型项目的开发。</p>
</li>
<li><p>对于个人来说：适应市场需求，学习流行的技术提升竞争力，加薪！</p>
</li>
</ul>
<h3 id="Vite-基本使用"><a href="#Vite-基本使用" class="headerlink" title="Vite 基本使用"></a>Vite 基本使用</h3><p><strong>Vite是什么？</strong></p>
<ul>
<li>它是下一代前端开发与构建工具，热更新、打包构建速度更快，但目前周边生态还不如 Webpack 成熟，所以实际开发中还是建议使用 Webpack。</li>
<li>但目前就学习 Vue3 语法来说，我们可以使用更轻量的 <a href="https://vitejs.cn/guide/#scaffolding-your-first-vite-project">Vite</a>，例如要构建一个 Vite + Vue 项目，如下。</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init vite-app <span class="token operator">&lt;</span>project-name<span class="token operator">></span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">></span>
<span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run dev</code></pre>

<ul>
<li><p>Webpack：将所有的模块提前编译、打包进 bundle 中，不管这个模块是否被用到，随着项目越来越大，打包启动的速度自然越来越慢。</p>
</li>
<li><p>Vite：瞬间开启一个服务，并不会先编译所有文件，当浏览器用到某个文件时，Vite 服务会收到请求然后编译后相应到客户端。</p>
</li>
</ul>
<center style="overflow:hidden">
    <img src="https://s4.ax1x.com/2022/01/24/7T6xtH.png" style="float:left" width="48%"/>
    <img src="https://s4.ax1x.com/2022/01/24/7TcGEF.png" style="float:right" width="48%"/>
</center>



<h2 id="创建-Vue3-应用"><a href="#创建-Vue3-应用" class="headerlink" title="创建 Vue3 应用"></a>创建 Vue3 应用</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.在 <code>main.js</code> 中按需导入 <code>createApp</code> 函数</p>
<p>2.定义<code>App.vue</code> 根组件，导入到 <code>main.js</code>。</p>
<p>3.使用 <code>createApp</code> 函数基于 <code>App.vue</code> 根组件创建应用实例。</p>
<p>4.挂载至 <code>index.html</code> 的 #app 容器</p>
<p><code>main.js</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 1. 导入 createApp 函数，不再是曾经的 Vue 了</span>
<span class="token comment">// 2. 编写一个根组件 App.vue，导入进来</span>
<span class="token comment">// 3. 基于根组件创建应用实例，类似 Vue2 的 vm，但比 vm 更轻量</span>
<span class="token comment">// 4. 挂载到 index.html 的 #app 容器</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre>

<p><code>App.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>我是根组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="选项-组合-API"><a href="#选项-组合-API" class="headerlink" title="选项/组合 API"></a>选项/组合 API</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>理解什么是 Options API 写法，什么是 Composition API 写法。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><img src="https://s4.ax1x.com/2022/01/24/7TRGE8.png">



<h3 id="Vue2-实现"><a href="#Vue2-实现" class="headerlink" title="Vue2 实现"></a>Vue2 实现</h3><ul>
<li>优点：易于学习和使用，写代码的位置已经约定好。</li>
<li>缺点：数据和业务逻辑分散在同一个文件的 N 个地方，随着业务复杂度的上升，可能会出现动图左侧的代码组织方式，不利于管理和维护。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token constant">X</span> 轴：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> x <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token constant">Y</span> 轴：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
            <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add()"</span><span class="token operator">></span>自增<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// !#Fn1</span>
                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token comment">// ?#Fn2</span>
                <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// !#Fn1</span>
            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>move<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// !#Fn1</span>
            <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX
                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token comment">// ?#Fn2</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">destroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// !#Fn1</span>
            document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>move<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h3 id="Vue3-实现"><a href="#Vue3-实现" class="headerlink" title="Vue3 实现"></a>Vue3 实现</h3><ul>
<li><p>优点：可以把同一功能的<strong>数据</strong>和<strong>业务逻辑</strong>组织到一起，方便复用和维护。</p>
</li>
<li><p>缺点：需要有良好的代码组织和拆分能力，相对没有 Vue2 容易上手。</p>
</li>
<li><p>注意：为了能较好的过渡到 Vue3.0 版本，目前也是支持 Vue2.x 选项 API 的写法。</p>
</li>
<li><p>链接：<a href="https://v3.vuejs.org/guide/composition-api-introduction.html#why-composition-api">why-composition-api</a>、<a href="https://v3.cn.vuejs.org/api/composition-api.html">composition-api-doc</a>。</p>
</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token constant">X</span> 轴：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> x <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token constant">Y</span> 轴：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
            <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"add()"</span><span class="token operator">></span>自增<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> onUnmounted<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// !#Fn1</span>
            <span class="token keyword">const</span> mouse <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> <span class="token function-variable function">move</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                mouse<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX
                mouse<span class="token punctuation">.</span>y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY
            <span class="token punctuation">&#125;</span>
            <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> move<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

            <span class="token comment">// ?Fn2</span>
            <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                count<span class="token punctuation">.</span>value<span class="token operator">++</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">// 统一返回数据供模板使用</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>mouse<span class="token punctuation">)</span><span class="token punctuation">,</span>
                count<span class="token punctuation">,</span>
                add<span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="setup-入口函数"><a href="#setup-入口函数" class="headerlink" title="setup 入口函数"></a>setup 入口函数</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>是什么：<code>setup</code> 是 Vue3 中新增的组件配置项，作为组合 API 的入口函数。</li>
<li>执行时机：实例创建前调用，甚至早于 Vue2 中的 beforeCreate。</li>
<li>注意点：由于执行 setup 的时候实例还没有 created，所以在 setup 中是不能直接使用 data 和 methods 中的数据的，所以 Vue3 干脆把 setup 中的 this 绑定了 undefined，防止乱用！</li>
<li>虽然 Vue2 中的 data 和 methods 配置项虽然在 Vue3 中也能使用，但不建议了，建议数据和方法都写在 setup 函数中，并<strong>通过 return 进行返回可在模版中直接使用</strong>（一般情况下 setup 不能为异步函数）。</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1 @click<span class="token operator">=</span><span class="token string">"say()"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">'Hello Vue3'</span>
            <span class="token keyword">const</span> <span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> msg<span class="token punctuation">,</span> say <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h3 id="了解："><a href="#了解：" class="headerlink" title="了解："></a><strong>了解：</strong></h3><p>setup 也可以返回一个渲染函数（setup 中的 return 并非只能返回一个对象）。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">,</span> <span class="token string">'Hello Vue3'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="reactive-包装函数"><a href="#reactive-包装函数" class="headerlink" title="reactive 包装函数"></a>reactive 包装函数</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#reactive">reactive</a> 是一个函数，用来将普通对象/数组包装成响应式式数据使用（基于 Proxy），无法直接处理基本数据类型！</p>
<h2 id="Vue3-生命周期"><a href="#Vue3-生命周期" class="headerlink" title="Vue3 生命周期"></a>Vue3 生命周期</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li><a href="https://v3.cn.vuejs.org/api/composition-api.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">组合 API</a>生命周期写法，其实 <a href="https://v3.cn.vuejs.org/api/options-lifecycle-hooks.html#beforecreate">选项 API</a> 的写法在 Vue3 中也是支持。</li>
<li>Vue3（组合 API）常用的生命周期钩子有 7 个，<strong>可以多次使用同一个钩子</strong>，执行顺序和书写顺序相同。</li>
<li>setup、onBeforeMount、onMounted、onBeforeUpdate、onUpdated、onBeforeUnmount、onUnmounted。</li>
</ul>
<h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>toRef 函数的作用：转换<strong>响应式对象</strong>中某个属性为单独响应式数据，并且转换后的值和之前是关联的（ref 函数也可以转换，但值非关联，后面详讲 ref 函数）。</p>
<h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>toRefs 函数的作用：转换<strong>响应式对象</strong>中所有属性为单独响应式数据，并且转换后的值和之前是关联的。</p>
<h2 id="ref-函数"><a href="#ref-函数" class="headerlink" title="ref 函数"></a>ref 函数</h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h3><p>ref 函数，常用于把简单数据类型包裹为响应式数据，注意 JS 中操作值的时候，需要加 <code>.value</code> 属性，模板中正常使用即可。</p>
<ul>
<li>注意：ref 其实也可以包裹复杂数据类型为响应式数据，一般对于数据类型未确定的情况下推荐使用 ref。</li>
<li>当你明确知道需要包裹的是一个对象，那么推荐使用 reactive，其他情况使用 ref 即可。</li>
<li>ref 处理基本数据类型用的是 <code>Object.defineProperty</code> 进行数据劫持，处理复杂数据类型用的是 <code>Proxy</code>（内部借助了 reactive 函数）。</li>
</ul>
<h2 id="ref-属性"><a href="#ref-属性" class="headerlink" title="ref 属性"></a>ref 属性</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>获得单个 DOM 或者组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> #<span class="token number">3</span> <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"dom"</span><span class="token operator">></span>我是box<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// #1</span>
            <span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// #4</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token comment">// #2</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> dom <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p>配合 v-for 循环可以获取一组 DOM 或者组件。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>ul<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> #<span class="token number">4</span> <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"i in 4"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"i"</span> <span class="token operator">:</span>ref<span class="token operator">=</span><span class="token string">"setDom"</span><span class="token operator">></span>第 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> li<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> onMounted <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// #1</span>
            <span class="token keyword">const</span> domList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token comment">// #2</span>
            <span class="token keyword">const</span> <span class="token function-variable function">setDom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                domList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// #5</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>domList<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token comment">// #3</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> setDom <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>



<h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>computed 函数用来定义计算属性</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>firstName<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> person<span class="token punctuation">.</span>firstName <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>lastName<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> person<span class="token punctuation">.</span>lastName <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>fullName<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> person<span class="token punctuation">.</span>fullName <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'朱'</span><span class="token punctuation">,</span>
                <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'逸之'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            person<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token comment">// 也可以传入对象，目前和上面等价</span>
            <span class="token comment">/* person.fullName = computed(&#123;
                get() &#123;
                    return person.firstName + ' ' + person.lastName
                &#125;,
            &#125;) */</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                person<span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>firstName<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> person<span class="token punctuation">.</span>firstName <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>lastName<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> person<span class="token punctuation">.</span>lastName <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"person.fullName"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> computed<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'朱'</span><span class="token punctuation">,</span>
                <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'逸之'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token comment">// 也可以传入对象，目前和上面等价</span>
            person<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">const</span> newArr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
                    person<span class="token punctuation">.</span>firstName <span class="token operator">=</span> newArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                    person<span class="token punctuation">.</span>lastName <span class="token operator">=</span> newArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                person<span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<ul>
<li><p>给 computed 传入函数，返回值就是计算属性的值。</p>
</li>
<li><p>给 computed 传入对象，get 获取计算属性的值，set 监听计算属性改变。</p>
</li>
</ul>
<h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><h3 id="监听一个-ref-数据"><a href="#监听一个-ref-数据" class="headerlink" title="监听一个 ref 数据"></a>监听一个 ref 数据</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"age++"</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>
            <span class="token comment">// 监听 ref 数据 age，会触发后面的回调，不需要 .value</span>
            <span class="token function">watch</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h3 id="监听多个-ref-数据"><a href="#监听多个-ref-数据" class="headerlink" title="监听多个 ref 数据"></a>监听多个 ref 数据</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> num<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> num <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

            <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                age<span class="token punctuation">.</span>value<span class="token operator">++</span>
                num<span class="token punctuation">.</span>value<span class="token operator">++</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// 数组里面是 ref 数据</span>
            <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>age<span class="token punctuation">,</span> num<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">,</span> num<span class="token punctuation">,</span> handleClick <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>



<h3 id="立即触发监听"><a href="#立即触发监听" class="headerlink" title="立即触发监听"></a>立即触发监听</h3><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>

            <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                age<span class="token punctuation">.</span>value<span class="token operator">++</span>
            <span class="token punctuation">&#125;</span>

            <span class="token function">watch</span><span class="token punctuation">(</span>
                age<span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token comment">// 18 undefined</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> age<span class="token punctuation">,</span> handleClick <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h3 id="开启深度监听"><a href="#开启深度监听" class="headerlink" title="开启深度监听"></a>开启深度监听</h3><p>问题：修改 ref 对象里面的数据并不会触发监听，说明 ref 并不是默认开启 deep 的。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"obj.hobby.eat = '面条'"</span><span class="token operator">></span>修改 obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">eat</span><span class="token operator">:</span> <span class="token string">'西瓜'</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token function">watch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue <span class="token operator">===</span> oldValue<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> obj <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<ol>
<li>解决：当然直接修改整个对象的话肯定是会被监听到的（注意模板中对 obj 的修改，相当于修改的是 obj.value）。</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"obj = &#123; hobby: &#123; eat: '面条' &#125; &#125;"</span><span class="token operator">></span>修改 obj<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">eat</span><span class="token operator">:</span> <span class="token string">'西瓜'</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token function">watch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue <span class="token operator">===</span> oldValue<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> obj <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<ol start="2">
<li>解决：开启深度监听 ref 数据。</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token function">watch</span><span class="token punctuation">(</span>
    obj<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue <span class="token operator">===</span> oldValue<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span></code></pre>

<h3 id="监听-reactive-数据"><a href="#监听-reactive-数据" class="headerlink" title="监听 reactive 数据"></a>监听 reactive 数据</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>注意：监听 reactive 数据时，强制开启了深度监听，配置无效；监听对象的时候 newValue 和 oldValue 是全等的。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"obj.hobby.eat = '面条'"</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>
                <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">eat</span><span class="token operator">:</span> <span class="token string">'西瓜'</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token function">watch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 注意1：监听对象的时候，新旧值是相等的</span>
                <span class="token comment">// 注意2：强制开启深度监听，配置无效</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue <span class="token operator">===</span> oldValue<span class="token punctuation">)</span> <span class="token comment">// true</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> obj <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h4 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h4><ul>
<li>想让 ref 内部数据的修改被观测到，除了前面学习的开启深度监听，还可以通过监听 ref.value 来实现同样的效果。</li>
<li>因为 ref.value 是一个 reactive，可以通过 isReactive 方法来证明。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"obj.hobby.eat = '面条'"</span><span class="token operator">></span>修改 obj<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">eat</span><span class="token operator">:</span> <span class="token string">'西瓜'</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token function">watch</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue <span class="token operator">===</span> oldValue<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> obj <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h3 id="监听普通数据"><a href="#监听普通数据" class="headerlink" title="监听普通数据"></a>监听普通数据</h3><ol>
<li>监听响应式对象中的某一个普通属性值，要通过函数返回的方式进行（如果返回的是对象/响应式对象，修改内部的数据需要开启深度监听）。</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"obj.hobby.eat = '面条'"</span><span class="token operator">></span>修改 obj<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">eat</span><span class="token operator">:</span> <span class="token string">'西瓜'</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token comment">// 不叫普通属性值，是一个 reactive</span>
            <span class="token comment">/* watch(obj.hobby, (newValue, oldValue) => &#123;
                console.log(newValue, oldValue)
                console.log(newValue === oldValue)
            &#125;) */</span>
            <span class="token comment">// 叫普通属性值</span>
            <span class="token function">watch</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat<span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue <span class="token operator">===</span> oldValue<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> obj <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<ol start="2">
<li>监听 ref 数据的另一种写法。</li>
</ol>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"age++"</span><span class="token operator">></span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> watch<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>
            <span class="token comment">// 监听 ref 数据 age，会触发后面的回调，不需要 .value</span>
            <span class="token comment">/* watch(age, (newValue, oldValue) => &#123;
                console.log(newValue, oldValue);
            &#125;); */</span>
            <span class="token comment">// 另一种写法，函数返回一个普通值</span>
            <span class="token function">watch</span><span class="token punctuation">(</span>
                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> age<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"obj.hobby.eat = '面条'"</span><span class="token operator">></span>修改 obj<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> watchEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                <span class="token literal-property property">hobby</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">eat</span><span class="token operator">:</span> <span class="token string">'西瓜'</span><span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token comment">// 叫普通属性值</span>
            <span class="token comment">/* watch(obj, (newValue, oldValue) => &#123;
                console.log(newValue, oldValue)
                console.log(newValue === oldValue)
            &#125;) */</span>

            <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 1. 不指定监视哪一个，这里面用到了谁就监听谁</span>
                <span class="token comment">// 2. 第一次的时候肯定会执行</span>
                <span class="token comment">// 例如对 obj.hobby.eat 的修改，由于这里用到了 obj.hobby.eat，则会执行</span>
                <span class="token comment">// !注意如果这里用的是 obj 则不会被执行</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>hobby<span class="token punctuation">.</span>eat<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> obj <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h2><p>把 App.vue 中的数据传递给孙组件，Child.vue。</p>
<p><code>App.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h2<span class="token operator">></span>App <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> money <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"money = 1000"</span><span class="token operator">></span>发钱<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Parent <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> provide<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Parent <span class="token keyword">from</span> <span class="token string">'./Parent.vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Parent<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 提供数据</span>
            <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'money'</span><span class="token punctuation">,</span> money<span class="token punctuation">)</span>
            <span class="token comment">// 提供修改数据的方法</span>
            <span class="token keyword">const</span> <span class="token function-variable function">changeMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span>value <span class="token operator">-=</span> m<span class="token punctuation">)</span>
            <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'changeMoney'</span><span class="token punctuation">,</span> changeMoney<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> money <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><code>Parent.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
        Parent
        <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./Child.vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Child<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><code>Child.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
        Child
        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> money <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeMoney(1)"</span><span class="token operator">></span>花 <span class="token number">1</span> 块钱<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> inject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'money'</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> changeMoney <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'changeMoney'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> money<span class="token punctuation">,</span> changeMoney <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h2><ul>
<li>isRef: 检查一个值是否为 ref 对象。</li>
<li>isReactive: 检查一个对象是否是由 reactive 创建的响应式代理。</li>
<li>isReadonly: 检查一个对象是否是由 readonly 创建的只读代理。</li>
<li>isProxy: 检查一个对象是否是由 reactive 或者 readonly 方法创建的代理。</li>
</ul>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>name<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> readonly<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> toRefs<span class="token punctuation">,</span> isRef<span class="token punctuation">,</span> isReactive<span class="token punctuation">,</span> isReadonly<span class="token punctuation">,</span> isProxy <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> readonlyPerson <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isReadonly</span><span class="token punctuation">(</span>readonlyPerson<span class="token punctuation">)</span><span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isProxy</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isProxy</span><span class="token punctuation">(</span>readonlyPerson<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="setup-函数参数"><a href="#setup-函数参数" class="headerlink" title="setup 函数参数"></a>setup 函数参数</h2><p> setup 中参数的使用。</p>
<p><strong>父传子</strong></p>
<p><code>App.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>父组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> money <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">1.</span> 父组件通过自定义属性提供数据 <span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>Son <span class="token operator">:</span>money<span class="token operator">=</span><span class="token string">"money"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">'./Son.vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Son<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> money <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><code>Son.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> money <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Son'</span><span class="token punctuation">,</span>
        <span class="token comment">// 2. 子组件通过 props 进行接收，在模板中就可以使用啦</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">money</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 3. setup 中也可以通过形参 props 来获取传递的数据</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>money<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><strong>子传父</strong></p>
<p><code>App.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>父组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> money <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>Son <span class="token operator">:</span>money<span class="token operator">=</span><span class="token string">"money"</span> @change<span class="token operator">-</span>money<span class="token operator">=</span><span class="token string">"updateMoney"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">'./Son.vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Son<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> money <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token comment">// #1 父组件准备修改数据的方法并提供给子组件</span>
            <span class="token keyword">const</span> <span class="token function-variable function">updateMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newMoney</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                money<span class="token punctuation">.</span>value <span class="token operator">-=</span> newMoney
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> money<span class="token punctuation">,</span> updateMoney <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><code>Son.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> money <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeMoney(1)"</span><span class="token operator">></span>花 <span class="token number">1</span> 元<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Son'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">money</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'change-money'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// attrs 捡漏、slots 插槽</span>
            <span class="token keyword">const</span> <span class="token function-variable function">changeMoney</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// #2 子组件通过 emit 进行触发</span>
                <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'change-money'</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> changeMoney <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><p>在 Vue2 中 v-mode 语法糖简写的代码。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Son <span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"msg"</span> @input<span class="token operator">=</span><span class="token string">"msg=$event"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre>

<p>在 Vue3 中 v-model 语法糖有所调整。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>Son <span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token string">"msg"</span> @update<span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token string">"msg=$event"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre>

<p><code>App.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h2<span class="token operator">></span>count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
    <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>Son <span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token string">"count"</span> @update<span class="token operator">:</span>modelValue<span class="token operator">=</span><span class="token string">"count = $event"</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>Son v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"count"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">'./Son.vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Son<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><code>Son.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h2<span class="token operator">></span>子组件 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> modelValue <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$emit('update:modelValue', 100)"</span><span class="token operator">></span>改变 count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Son'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">modelValue</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h4 id="传递多个"><a href="#传递多个" class="headerlink" title="传递多个"></a>传递多个</h4><p><code>App.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h2<span class="token operator">></span>count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
    <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>Son v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"count"</span> v<span class="token operator">-</span>model<span class="token operator">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">'./Son.vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Son<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><code>Son.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h2<span class="token operator">></span>子组件 <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> modelValue <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$emit('update:modelValue', 100)"</span><span class="token operator">></span>改变 count<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$emit('update:age', 19)"</span><span class="token operator">></span>改变 age<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Son'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">modelValue</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><ul>
<li>Vue2 中组件必须有一个跟标签。</li>
<li>Vue3 中组件可以没有根标签，其内部会将多个标签包含在一个 Fragment 虚拟元素中。</li>
<li>好处：减少标签层级和内存占用。</li>
</ul>
<h2 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h2><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>传送，能将特定的 HTML 结构（一般是嵌套很深的）移动到指定的位置，解决 HTML 结构嵌套过深造成的样式影响或不好控制的问题。</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>在 Child 组件点击按钮进行弹框。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>dialog v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"bBar"</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleDialog"</span><span class="token operator">></span>显示弹框<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Dialog <span class="token keyword">from</span> <span class="token string">'./Dialog.vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Child'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Dialog<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> bBar <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> <span class="token function-variable function">handleDialog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                bBar<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>bBar<span class="token punctuation">.</span>value
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
                bBar<span class="token punctuation">,</span>
                handleDialog<span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>teleport to<span class="token operator">=</span><span class="token string">"body"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>dialog v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"bBar"</span> <span class="token operator">/</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>teleport<span class="token operator">></span>
        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"handleDialog"</span><span class="token operator">></span>显示弹框<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><p>异步组件加载期间，可以使用此组件渲染一些额外的内容，增强用户体验。</p>
<h4 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>
        App
        <span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment">// 静态引入 => 等待所有子组件加载完再统一渲染</span>
    <span class="token comment">// import Test from './Test.vue'</span>
    <span class="token comment">// 动态/异步引入</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineAsyncComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> Test <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Test.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Test<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h4 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>
        App
        <span class="token operator">&lt;</span>Suspense<span class="token operator">></span>
            <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span><span class="token keyword">default</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
            <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>fallback<span class="token operator">></span>
                <span class="token operator">&lt;</span>div<span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token comment">// 静态引入 => 等待所有子组件加载完再统一渲染</span>
    <span class="token comment">// import Test from './Test.vue'</span>
    <span class="token comment">// 动态/异步引入</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineAsyncComponent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> Test <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./Test.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Test<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h4 id="一个细节"><a href="#一个细节" class="headerlink" title="一个细节"></a>一个细节</h4><p>setup 也可以返回一个 Promise 实例，但要异步引入此组件并配合 Suspense 使用。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span>Test<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Test'</span><span class="token punctuation">,</span>
        <span class="token comment">/* setup() &#123;
            const count = ref(0)
            // 也可以返回 Promise 实例，但要异步引入此组件并配合 Suspense 使用
            return new Promise((resolve, reject) => &#123;
            setTimeout(() => &#123;
                resolve(&#123; count &#125;)
            &#125;, 3000)
            &#125;)
        &#125;, */</span>
        <span class="token keyword">async</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="script-setup"><a href="#script-setup" class="headerlink" title="script setup"></a>script setup</h2><p><a href="https://v3.cn.vuejs.org/api/sfc-script-setup.html#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">文档</a></p>
<h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>name<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="method"><a href="#method" class="headerlink" title="method"></a>method</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>

    <span class="token comment">// 修改名字</span>
    <span class="token keyword">const</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'xxx'</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>name<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeName"</span><span class="token operator">></span>修改名字<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="computed-1"><a href="#computed-1" class="headerlink" title="computed"></a>computed</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> isRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">'热'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">'巴'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>firstName <span class="token operator">+</span> state<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>fullName<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> fullName <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="watch-1"><a href="#watch-1" class="headerlink" title="watch"></a>watch</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>count<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"count++"</span><span class="token operator">></span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>父组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./Hello.vue'</span>
    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>Hello v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"person"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<p>子组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token comment">// defineProps 无需引用，可以在 script setup 中直接使用</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>name<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> props<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h4><p>父组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./Hello.vue'</span>
    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">updateAge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        person<span class="token punctuation">.</span>age<span class="token operator">++</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>Hello v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"person"</span> @updateAge<span class="token operator">=</span><span class="token string">"updateAge"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<p>子组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token comment">// defineProps 无需引用，可以在 script setup 中直接使用</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'updateAge'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> <span class="token function-variable function">updateAge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'updateAge'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>name<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> props<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"emit('updateAge')"</span><span class="token operator">></span>update name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"$emit('updateAge')"</span><span class="token operator">></span>update name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateAge"</span><span class="token operator">></span>update name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="v-model-1"><a href="#v-model-1" class="headerlink" title="v-model"></a>v-model</h4><p>父组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./Hello.vue'</span>
    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>Hello v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"person.name"</span> v<span class="token operator">-</span>model<span class="token operator">:</span>age<span class="token operator">=</span><span class="token string">"person.age"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<p>子组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token comment">// defineProps 无需引用，可以在 script setup 中直接使用</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">modelValue</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> <span class="token string">'update:age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">const</span> <span class="token function-variable function">updateName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> <span class="token string">'xxx'</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">updateAge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'update:age'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>name<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> props<span class="token punctuation">.</span>modelValue <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateName"</span><span class="token operator">></span>update name<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"updateAge"</span><span class="token operator">></span>update age<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h4><ul>
<li>标准组件写法中，父组件通过 ref 拿到子组件实例，并可以直接访问子组件中的 data 和 method。</li>
<li>script-setup 模式下，data 和 method 默认只能给当前组件的 template 使用，外界通过 ref 无法访问到。</li>
<li>解决：需要手动的通过 defineExpose 进行暴露。</li>
</ul>
<p>父组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ref<span class="token punctuation">,</span> nextTick <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./Hello.vue'</span>
    <span class="token keyword">const</span> childRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        childRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">updatePerson</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>Hello ref<span class="token operator">=</span><span class="token string">"childRef"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<p>子组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token function-variable function">updatePerson</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        person<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        person<span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 注意是 defineExpose，不要打成 defineProps 了</span>
    <span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        updatePerson<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h2<span class="token operator">></span>name<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> person<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> age<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> person<span class="token punctuation">.</span>age <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h4><p>父组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> Hello <span class="token keyword">from</span> <span class="token string">'./Hello.vue'</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>Hello<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 默认插槽 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>h2<span class="token operator">></span>默认插槽<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 具名插槽 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>template #title<span class="token operator">></span>
            <span class="token operator">&lt;</span>h2<span class="token operator">></span>具名插槽<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 作用域插槽 <span class="token operator">--</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>template #footer<span class="token operator">=</span><span class="token string">"&#123; person &#125;"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>h2<span class="token operator">></span>通过作用域插槽获取到的数据：<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> person<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Hello<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<p>子组件</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive<span class="token punctuation">,</span> useSlots <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> slots <span class="token operator">=</span> <span class="token function">useSlots</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'ifer'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// 可以拿到插槽相关的信息</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>slots<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>slot <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"title"</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span> <span class="token operator">:</span>person<span class="token operator">=</span><span class="token string">"person"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="CSS-变量注入"><a href="#CSS-变量注入" class="headerlink" title="CSS 变量注入"></a>CSS 变量注入</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'pink'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h2<span class="token operator">></span>Hello Vue3<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>style scoped<span class="token operator">></span>
    h2 <span class="token punctuation">&#123;</span>
        <span class="token comment">/* 可以使用 v-bind 绑定变量 */</span>
        <span class="token literal-property property">color</span><span class="token operator">:</span> v<span class="token operator">-</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'state.color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre>

<h4 id="原型绑定与组件使用"><a href="#原型绑定与组件使用" class="headerlink" title="原型绑定与组件使用"></a>原型绑定与组件使用</h4><p><code>main.js</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token string">'再见 2021，你好 2022~~'</span>
app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre>

<p><code>App.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getCurrentInstance <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> proxy <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> proxy<span class="token punctuation">.</span>year <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="对-await-支持"><a href="#对-await-支持" class="headerlink" title="对 await 支持"></a>对 await 支持</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>
    <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://autumnfish.cn/api/joke'</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">await</span> r<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> proxy<span class="token punctuation">.</span>year <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>

<h4 id="定义组件的-name"><a href="#定义组件的-name" class="headerlink" title="定义组件的 name"></a>定义组件的 name</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloCmp'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h4 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h4><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能，一个混入对象可以包含任意组件选项，当组件使用混入对象时，所有混入对象的选项将被“混合”进该组件本身。</p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// Vue2 写法</span>
Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// Vue3 写法</span>
app<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p><code>follow.js</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> follow <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token function">followFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token comment">// 模拟请求</span>
            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 省略请求代码</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>App.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> @click<span class="token operator">=</span><span class="token string">"followFn"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> loading <span class="token operator">?</span> <span class="token string">'请求中...'</span> <span class="token operator">:</span> <span class="token string">'关注'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
    <span class="token operator">&lt;</span>Son <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> Son <span class="token keyword">from</span> <span class="token string">'./Son.vue'</span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> follow <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./follow'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            Son<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>follow<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><code>Son.vue</code></p>
<pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"javascript:;"</span> @click<span class="token operator">=</span><span class="token string">"followFn"</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> loading <span class="token operator">?</span> <span class="token string">'请求中...'</span> <span class="token operator">:</span> <span class="token string">'关注'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> follow <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./follow'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Son'</span><span class="token punctuation">,</span>
        <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>follow<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<h2 id="其他变更"><a href="#其他变更" class="headerlink" title="其他变更"></a>其他变更</h2><p><a href="https://v3.cn.vuejs.org/guide/migration/introduction.html#%E6%A6%82%E8%A7%88">参考 Vue3 迁移指南</a></p>
<ol>
<li>全局 API 的变更，<a href="https://v3.cn.vuejs.org/guide/migration/introduction.html#%E5%85%A8%E5%B1%80-api">链接</a>。</li>
<li>data 只能是函数，<a href="https://v3.cn.vuejs.org/guide/migration/data-option.html#%E6%A6%82%E8%A7%88">链接</a>。</li>
<li>自定义指令 API 和组件保持一致，<a href="https://v3.cn.vuejs.org/guide/migration/custom-directives.html#_2-x-%E8%AF%AD%E6%B3%95">链接</a>。</li>
<li>keyCode 作为 v-on 修饰符被移除、移除 v-on.native 修饰符、filters 被移除，<a href="https://v3.cn.vuejs.org/guide/migration/introduction.html#%E7%A7%BB%E9%99%A4-api">链接</a>。</li>
<li>$on、$off、$once 被移除，<a href="https://v3.cn.vuejs.org/guide/migration/events-api.html#%E6%A6%82%E8%A7%88">链接</a>。</li>
<li>过渡类名的更改，<a href="https://v3.cn.vuejs.org/guide/migration/transition.html#%E6%A6%82%E8%A7%88">链接</a>。</li>
<li>…</li>
</ol>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
